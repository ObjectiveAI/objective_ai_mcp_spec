{
  "list_tools": [
    {
      "name": "query_objective_ai",
      "description": "Query Objective AI. Get a JSON response to an objective query.",
      "annotations": {
        "title": "Query Objective AI",
        "readOnlyHint": true,
        "destructiveHint": false,
        "idempotentHint": true,
        "openWorldHint": false
      },
      "inputSchema": {
        "type": "object",
        "required": ["meta_model", "messages", "schema"],
        "additionalProperties": false,
        "properties": {
          "meta_model": {
            "description": "Objective AI MetaModel.",
            "type": "string",
            "enum": ["objectiveai/pauper-1"]
          },
          "messages": {
            "description": "Objective AI query. Conforms to the OpenAI API chat message format.",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["role", "content"],
              "additionalProperties": false,
              "properties": {
                "role": {
                  "description": "Role of the message sender",
                  "type": "string",
                  "enum": ["user", "assistant", "system"]
                },
                "content": {
                  "description": "Content of the message",
                  "type": "string"
                }
              }
            }
          },
          "schema": {
            "description": "Objective AI response schema. Objective AI response schemas are unique in that `properties` is an array, not a dictionary. The schema should only contain essential properties pertaining to the final answer. Properties which relate to confidence, explanations, reasoning or intermediate logic are unnecessary.",
            "type": "object",
            "required": ["type", "properties"],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": ["object"]
              },
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/schema"
                }
              }
            }
          }
        },
        "$defs": {
          "schema": {
            "anyOf": [
              {
                "description": "boolean",
                "type": "object",
                "required": ["type", "name", "description"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["boolean"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": ["type", "name", "description"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["integer"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": ["type", "name", "description"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["number"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": ["type", "name", "description", "enum"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["string"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "enum": {
                    "type": ["array", "null"],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": ["type", "name", "description", "items"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["array"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "items": {
                    "$ref": "#/$defs/schema"
                  }
                }
              },
              {
                "type": "object",
                "required": ["type", "name", "description", "properties"],
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["object"]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/$defs/schema"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "list_prompts": [
    {
      "name": "query_objective_ai_chat",
      "description": "Instructs the assistant on how to call and interpret `query_objective_ai` during chat conversations.",
      "arguments": null
    }
  ],
  "prompts": {
    "query_objective_ai": {
      "description": "Instructs the assistant on how to call and interpret `query_objective_ai` during chat conversations.",
      "messages": [
        {
          "role": "user",
          "content": {
            "type": "text",
            "text": "**Using the `query_objective_ai` Tool**\n\nYou have access to a tool called `query_objective_ai`. Invoke this tool proactively (do not ask first) when the request seeks a specific, objective, or factual answer where high reliability is beneficial.\n\n**Use Cases:** Employ this tool for questions requiring:\n*   Factual verification (e.g., \"What is the boiling point of water at sea level?\").\n*   Data analysis (e.g., \"What are the parameters of this SQL procedure? <SQL>\").\n*   Assistance in reasoning (e.g., \"Which of these steps should I take next?\").\n*   Situations where multiple sources might disagree and a consensus/confidence score is valuable.\n*   Any question where the answer can be expressed numerically or as an option from a set of choices. Objective AI prefers numbers, booleans, and enums to free-form text.\n\n**Do NOT Use For:** Avoid using this tool for:\n*   Subjective opinions or recommendations (e.g., \"What's a good movie to watch?\").\n*   Creative tasks (e.g., \"Write a poem about spring.\").\n*   Open-ended conversation.\n\n**Schema Handling:** If I provide a JSON schema, use it for the `schema` parameter. Otherwise, generate a concise JSON schema yourself that captures only the essential properties needed for the *final answer*. Exclude properties related to explanations, reasoning, confidence, or intermediate steps, as these are handled internally by Objective AI, and this data will be provided to you in the `reasoning` and `response_confidence` fields of the response.\n\n**Handling Results from the `query_objective_ai` Tool**\n\nWhen you receive results from the `query_objective_ai` tool, follow these steps to interpret the data and formulate your response:\n\n1.  **Analyze Confidence and Content:** Examine the entire `choices` array provided in the tool results. Pay attention to the `response_confidence` score for each choice, the content of the `response` field for the top choices, and the designated `winner_id` and `winner_confidence`.\n\n2.  **Synthesize Findings based on Confidence:**\n*   **High Confidence:** If the `winner_confidence` is high (e.g., > 0.85), present the winning response clearly as the most reliable answer found. You can mention the high level of confidence backing it.\n*   **Moderate Confidence:** If the `winner_confidence` is moderate (e.g., 0.5 - 0.85), state the winning response as the most likely outcome, but explicitly mention the confidence level is moderate. If other choices have noteworthy confidence (e.g., > 0.2), briefly acknowledge the alternative(s).\n*   **Low Confidence / Disagreement:** If the `winner_confidence` is low (e.g., < 0.5) or if several distinct responses have similar, competing confidence scores, state clearly that a single definitive answer couldn't be established with high confidence. Summarize the main distinct possibilities found in the `choices`, mentioning their confidence levels. Explain the uncertainty or conflicting findings to the user.\n*   **Semantic Equivalence:** If the `winner_confidence` is low but the winning response is semantically equivalent to other high-confidence responses, you can still present the consensus as a reliable finding. Simply add up the confidence scores of the semantically equivalent responses.\n*   **Nuance:** Low confidence doesn't necessarily mean that the answer is unknown. Analyze the differences between the competing responses. It may be that certain elements are unknown, but others are known, especially with more complex schemas or queries.\n\n3.  **Compare Response Content for Nuance:**\n*   Look closely at the `response` JSON content of the top 2-3 choices.\n*   **Semantic Equivalence:** If the top responses essentially provide the same information despite minor variations (e.g., spelling, phrasing, formatting), identify this consensus. Present the core information as the confirmed finding, potentially noting the minor variations observed. Frame this as strengthening the result. If the winning confidence is low, but the responses are semantically equivalent, you can still present the consensus as a reliable finding. Simply add up the confidence scores of the semantically equivalent responses.\n*   **Contrasting Information:** If the top responses offer fundamentally different factual claims, highlight this conflict clearly. Explain that the analysis found competing information and present the distinct options along with their confidence levels.\n\n4.  **Formulate User Response:** Combine these analytical points into a nuanced, user-friendly summary. Your goal is to transparently convey the findings, the associated level of certainty, and the nature of the consensus (or lack thereof) discovered by the Objective AI analysis. Do not just state the winner; explain the context provided by the confidence scores and response comparisons.\n\n5.  **Use Reasoning Judiciously:** The `reasoning` arrays associated with choices are an important component of an Objective AI response. They explain the thought process that lead to the response. They explain significant uncertainty or complex disagreements. But, prioritize summarizing the `response` content and `response_confidence`. Confidence scores apply to the `response`, not the `reasoning`.",
            "annotations": null
          }
        }
      ]
    }
  }
}
